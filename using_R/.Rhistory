counts <- read.delim("C:/RNA_Seq_Analysis/data/count.out", header = TRUE, row.names = 1)
which(rowSums(counts) == 0)
counts[which(rowSums(counts) > 0),]
counts[which(rowSums(counts) == 0),]
counts <- read.delim("C:/RNA_Seq_Analysis/data/count.out", header = TRUE, row.names = 1)
# filter genes with 0 reads in all samples.
counts <- counts[which(rowSums(counts) > 0),]
counts
counts <- read.delim("C:/RNA_Seq_Analysis/data/count.out", header = TRUE, row.names = 1)
dim(counts)
# filter genes with 0 reads in all samples.
counts <- counts[which(rowSums(counts) > 0),]
dim(counts)
head(counts)
rownames(counts)
colnames(counts)
# Creating a DGEList object
dgList <- DGEList(counts=counts, genes=rownames(counts))
head(counts)
dgList
dgList
dgList$samples
dgList
dgList$samples
head(dgList$counts)
#dgList
#dgList$samples
head(dgList$counts)
#dgList
#dgList$samples
head(dgList$counts)
head(dgList$genes)
dgList
#dgList$samples
# head(dgList$counts)
# head(dgList$genes)
# dgList
dgList$samples
# head(dgList$counts)
# head(dgList$genes)
dgList
# dgList$samples
# head(dgList$counts)
# head(dgList$genes)
# Normalization
dgList <- calcNormFactors(dgList, method="TMM")
plotMDS(dgList)
?plotMDS
group <-  factor(c("C","S","C","S","C","S","C","S"))
plotMDS(dgList, col=as.numeric(group), pch=19, main="MDS Plot")
legend("topright", legend=levels(group), col=1:length(levels(group)), pch=19)
group <-  factor(c("C","S","C","S","C","S","C","S"))
plotMDS(dgList, col=as.numeric(group), pch=19, main="MDS Plot")
legend("bottomright", legend=levels(group), col=1:length(levels(group)), pch=19)
col=as.numeric(group)
# Setting up the Model
ncol(dgList)
# Setting up the Model
sampleType<- rep("N", ncol(dgList))
sampleType
sampleType[grep("T", colnames(dgList))] <- "T"
sampleType
sampleReplicate <- paste("S", rep(1:3, each=2), sep="")
sampleReplicate
# Setting up the Model
sampleType<- rep("C", ncol(dgList)) # C for control samples
sampleType
group <-  factor(c("Ctr","RS","Ctr","RS","Ctr","RS","Ctr","RS"))
plotMDS(dgList, col=as.numeric(group), pch=19, main="MDS Plot")
legend("bottomright", legend=levels(group), col=1:length(levels(group)), pch=19)
# Setting up the Model
sampleType<- rep("Ctr", ncol(dgList)) # C for control samples
sampleType
sampleType[grep("RS", colnames(dgList))] <- "RS"
sampleType
sampleReplicate <- paste("S", rep(1:2, each=1), sep="")
sampleReplicate
sampleReplicate <- paste("S", rep(1:2, each=2), sep="")
sampleReplicate
sampleReplicate <- paste("S", rep(1:4, each=2), sep="")
sampleReplicate
sampleReplicate <- paste("S", rep(1:2, each=4), sep="")
sampleReplicate
sampleReplicate <- paste("S", rep(1:2, each=4), sep="")
sampleReplicate
sampleReplicate <- paste("S", rep(1:3, each=2), sep="")
sampleReplicate
sampleReplicate <- paste("S", rep(1:4, each=2), sep="")
sampleReplicate
designMat <- model.matrix(~sampleReplicate + sampleType)
designMat
# Examine inter-sample relationship
# plotMDS(dgList)
plotMDS(d, method="bcv", col=as.numeric(dgList$samples$group))
# Examine inter-sample relationship
# plotMDS(dgList)
plotMDS(dgList, method="bcv", col=as.numeric(dgList$samples$group))
legend("bottomleft", as.character(unique(dgList$samples$group)), col=1:3, pch=20)
# Examine inter-sample relationship
plotMDS(dgList)
# Creating a DGEList object
group <- factor(c("Ctr", "RS", "Ctr", "RS", "Ctr", "RS", "Ctr", "RS"))
dgList <- DGEList(counts=counts, genes=rownames(counts), group = group)
dgList
# dgList$samples
# head(dgList$counts)
# head(dgList$genes)
# Examine inter-sample relationship
# plotMDS(dgList)
plotMDS(dgList, method="bcv", col=as.numeric(dgList$samples$group))
legend("bottomleft", as.character(unique(dgList$samples$group)), col=1:3, pch=20)
# Examine inter-sample relationship
# plotMDS(dgList)
plotMDS(dgList, method="bcv", col=as.numeric(dgList$samples$group))
legend("bottomleft", as.character(unique(dgList$samples$group)), col=1:3, pch=20)
plotMDS(dgList, col=as.numeric(dgList$samples$group), pch=19, main="MDS Plot")
legend("bottomright", legend=levels(group), col=1:length(levels(dgList$samples$group)), pch=19)
# Examine inter-sample relationship
# plotMDS(dgList)
plotMDS(dgList, col=as.numeric(dgList$samples$group), pch=19, main="MDS Plot")
legend("bottomright", legend=levels(group), col=1:length(levels(dgList$samples$group)), pch=19)
# Examine inter-sample relationship
# plotMDS(dgList)
plotMDS(dgList, col=as.numeric(dgList$samples$group), pch=19, main="MDS Plot")
legend("bottomleft", legend=levels(group), col=1:length(levels(dgList$samples$group)), pch=19)
# Creating a DGEList object
group <- factor(c("Ctr", "RS", "Ctr", "RS", "Ctr", "RS", "Ctr", "RS"))
dgList <- DGEList(counts=counts, genes=rownames(counts), group = group)
dgList
# dgList$samples
# head(dgList$counts)
# head(dgList$genes)
# Normalization
dgList <- calcNormFactors(dgList, method="TMM")
dgList$samples
dgList
# dgList$samples
# head(dgList$counts)
# head(dgList$genes)
# Creating a DGEList object
group <- factor(c("Ctr", "RS", "Ctr", "RS", "Ctr", "RS", "Ctr", "RS"))
dgList <- DGEList(counts=counts, genes=rownames(counts), group = group)
dgList
# dgList$samples
# head(dgList$counts)
# head(dgList$genes)
# Normalization
dgList <- calcNormFactors(dgList, method="TMM")
dgList$samples
# Examine inter-sample relationship
# plotMDS(dgList)
plotMDS(dgList, col=as.numeric(dgList$samples$group), pch=19, main="MDS Plot")
legend("bottomleft", legend=levels(group), col=1:length(levels(dgList$samples$group)), pch=19)
# Setting up the Model
sampleType<- rep("Ctr", ncol(dgList)) # C for control samples
sampleType
sampleType[grep("RS", colnames(dgList))] <- "RS"
sampleType
sampleReplicate <- paste("S", rep(1:4, each=2), sep="")
sampleReplicate
# Estimate dispersions
dgList <- estimateCommonDisp(dgList)
dgList <- estimateTrendedDisp(dgList)
dgList <- estimateTagwiseDisp(dgList)
plotBCV(dgList)
# Perform exact test for differential expression
et <- exactTest(dgList, pair=c("Ctr","RS"))
# Perform exact test for differential expression
et <- exactTest(dgList, pair=c("Ctr","RS"))
et
# Get top differentially expressed genes
topTags(et)
# `topTags(et, n=Inf)Â´ show all genes ranked by p-value.
res <- topTags(et, n=Inf)$table
res
# Find significant genes
sigs <- results[results$FDR < 0.05 & abs(results$logFC) > 1, ]
# Find significant genes
sigs <- res[res$FDR < 0.05 & abs(res$logFC) > 1, ]
sigs
# Perform exact test for differential expression
et <- exactTest(dgList, pair=c("Ctr","RS"))
et
plotMD(et, main="MA Plot", ylim=c(-5,5))
top_gene_ids <- rownames(sigs)
pheatmap(log2(counts[top_gene_ids, ] + 1), cluster_rows=TRUE, cluster_cols=TRUE)
any(is.na(sigs))
library(org.Hs.eg.db)
sigs$symbol <- mapIds(org.Hs.eg.db, keys = rownames(sigs), keytype = "ENSEMBL", column = "SYMBOL")
sigs <- sigs[!is.na(sigs$symbol),]
sigs
any(is.na(res))
type(res)
View(res)
res$symbol <- mapIds(org.Hs.eg.db, keys = rownames(res), keytype = "ENSEMBL", column = "SYMBOL")
res <- res[!is.na(res$symbol),]
res
# Volcano plots for differentially expressed genes
res$expression <- "NOT"
res$expression[res$FDR < 0.05 & res$logFC > 0.5] <- "UP"
res$expression[res$FDR < 0.05 & res$logFC < -0.5] <- "DOWN"
ggplot(data = res.df, aes(x = logFC, y = -log10(FDR), col = expression)) +
geom_vline(xintercept = c(-0.5, 0.5), col = "gray", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "gray", linetype = 'dashed') +
geom_point(size = 2) +
scale_color_manual(values = c("#3498DB", "grey", "#E74C3C"),
labels = c("Downregulated", "Not significant", "Upregulated")) +
theme_classic()
# Volcano plots for differentially expressed genes
res$expression <- "NOT"
res$expression[res$FDR < 0.05 & res$logFC > 0.5] <- "UP"
res$expression[res$FDR < 0.05 & res$logFC < -0.5] <- "DOWN"
ggplot(data = res, aes(x = logFC, y = -log10(FDR), col = expression)) +
geom_vline(xintercept = c(-0.5, 0.5), col = "gray", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "gray", linetype = 'dashed') +
geom_point(size = 2) +
scale_color_manual(values = c("#3498DB", "grey", "#E74C3C"),
labels = c("Downregulated", "Not significant", "Upregulated")) +
theme_classic()
library(EnhancedVolcano)
EnhancedVolcano(res, x = 'logFC', y = 'FDR', lab = res$symbol,
pCutoff = 0.05, FCcutoff = 0.5)
# Find significant genes
sigs <- res[res$FDR < 0.05 & abs(res$logFC) > 1, ]
sigs
library(ComplexHeatmap)
# Heatmap of differentially expressed genes
pheatmap(log2(counts[rownames(sigs), ] + 1), cluster_rows=TRUE, cluster_cols=TRUE)
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)
mat
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)[rownames(sigs),]
mat
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)[rownames(sigs),]
mat.z <- t(apply(mat, 1, scale))
mat.z
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)[rownames(sigs),]
mat
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)[rownames(sigs),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) <- rownames(mat)
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)[rownames(sigs),]
mat.z <- t(apply(mat, 1, scale))
mat.z
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)[rownames(sigs),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat)
colnames(mat.z)
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)[rownames(sigs),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) = colnames(mat)
head(mat.z)
Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat.z),
name = "Z-score", row_labels = sigs[rownames(mat.z),]$symbol)
library(grid)  # for gpar()
Heatmap(
mat.z,
cluster_rows = TRUE,
cluster_columns = TRUE,
column_labels = colnames(mat.z),
name = "Z-score",
row_labels = sigs[rownames(mat.z),]$symbol,
row_names_gp = gpar(fontsize = 8),    # set row label size
column_names_gp = gpar(fontsize = 10) # set column label size
)
library(DESeq2)
library(ggplot2)
library(ComplexHeatmap)
library(org.Hs.eg.db) # library(org.Mm.eg.db) for mouse
library(EnhancedVolcano)
library(clusterProfiler)
library(AnnotationDbi)
# load raw gene-level counts
counts <- read.delim("C:/RNA_Seq_Analysis/data/count.out", header = TRUE, row.names = 1)
counts <- counts[which(rowSums(counts) > 0),] # filter rows with only 0
counts
condition <-  factor(c("C","S","C","S","C","S","C","S"))
coldata <- data.frame(row.names = colnames(counts), condition)
coldata
levels(coldata$condition)
# Run DeSEQ2
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~condition)
dds <- DESeq(dds)
# Variance-Stabilizing Transformation (VST) & PCA
vsdata <- vst(dds, blind = FALSE)
plotPCA(vsdata, intgroup="condition")+ theme_grey()
res <- results(dds, contrast = c("condition", "S", "C")) #DeSEQ2 result
res
res <- na.omit(res)
res.df <- as.data.frame(res)
res.df
# save DeSEQ2 output
write.csv(res.df, "C:/RNA_Seq_Analysis/data/deseq_out.csv", row.names = TRUE)
res.df$symbol <- mapIds(org.Hs.eg.db, keys = rownames(res.df), keytype = "ENSEMBL", column = "SYMBOL")
res.df <- res.df[!is.na(res.df$symbol),]
res.df
# Volcano plot
EnhancedVolcano(res.df, x = 'log2FoldChange', y = 'padj', lab = res.df$symbol,
pCutoff = 0.05, FCcutoff = 0.5)
# Volcano plot using ggplot2
res.df$expression <- "NOT"
res.df$expression[res.df$padj < 0.05 & res.df$log2FoldChange > 0.5] <- "UP"
res.df$expression[res.df$padj < 0.05 & res.df$log2FoldChange < -0.5] <- "DOWN"
ggplot(data = res.df, aes(x = log2FoldChange, y = -log10(padj), col = expression)) +
geom_vline(xintercept = c(-0.5, 0.5), col = "gray", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "gray", linetype = 'dashed') +
geom_point(size = 2) +
scale_color_manual(values = c("#3498DB", "grey", "#E74C3C"),
labels = c("Downregulated", "Not significant", "Upregulated")) +
theme_classic()
EnhancedVolcano(res.df, x = 'log2FoldChange', y = 'padj', lab = res.df$symbol,
pCutoff = 0.05, FCcutoff = 0.5)
# Find significant genes
sigs.df <- res.df[res.df$padj < 0.05,]
sigs.df <- sigs.df[(sigs.df$baseMean > 100) & (abs(sigs.df$log2FoldChange) > 1),]
sigs.df
# Find significant genes
sigs.df <- res.df[res.df$padj < 0.05,]
sigs.df <- sigs.df[ (abs(sigs.df$log2FoldChange) > 1),]
sigs.df
# heatmap of "significant"  DEGs
mat <- counts(dds, normalized=T)[rownames(sigs.df),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) <- rownames(coldata)
library(grid)  # for gpar()
Heatmap(
mat.z,
cluster_rows = TRUE,
cluster_columns = TRUE,
column_labels = colnames(mat.z),
name = "Z-score",
row_labels = sigs[rownames(mat.z),]$symbol,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 10)
)
library(grid)  # for gpar()
Heatmap(
mat.z,
cluster_rows = TRUE,
cluster_columns = TRUE,
column_labels = colnames(mat.z),
name = "Z-score",
row_labels = sigs.df[rownames(mat.z),]$symbol,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 10)
)
# Volcano plots for differentially expressed genes
res$expression <- "NOT"
res$expression[res$FDR < 0.05 & res$logFC > 1] <- "UP"
res$expression[res$FDR < 0.05 & res$logFC < -1] <- "DOWN"
ggplot(data = res, aes(x = logFC, y = -log10(FDR), col = expression)) +
geom_vline(xintercept = c(-1, 1), col = "gray", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "gray", linetype = 'dashed') +
geom_point(size = 2) +
scale_color_manual(values = c("#3498DB", "grey", "#E74C3C"),
labels = c("Downregulated", "Not significant", "Upregulated")) +
theme_classic()
library(edgeR)
library(ggplot2)
library(ComplexHeatmap)
library(org.Hs.eg.db)
library(EnhancedVolcano)
# Reading in the Data
counts <- read.delim("C:/RNA_Seq_Analysis/data/count.out", header = TRUE, row.names = 1)
dim(counts)
# Filtering: removed genes with 0 reads in all samples.
counts <- counts[which(rowSums(counts) > 0),]
dim(counts)
head(counts)
# Creating a DGEList object
group <- factor(c("Ctr", "RS", "Ctr", "RS", "Ctr", "RS", "Ctr", "RS"))
dgList <- DGEList(counts=counts, genes=rownames(counts), group = group)
dgList
# dgList$samples
# head(dgList$counts)
# head(dgList$genes)
# Normalization
dgList <- calcNormFactors(dgList, method="TMM")
dgList$samples
# Examine inter-sample relationship
# plotMDS(dgList)
plotMDS(dgList, col=as.numeric(dgList$samples$group), pch=19, main="MDS Plot")
legend("bottomleft", legend=levels(group), col=1:length(levels(dgList$samples$group)), pch=19)
# Estimate dispersions
dgList <- estimateCommonDisp(dgList)
dgList <- estimateTrendedDisp(dgList)
dgList <- estimateTagwiseDisp(dgList)
plotBCV(dgList)
# Perform exact test for differential expression
et <- exactTest(dgList, pair=c("Ctr","RS"))
et
plotMD(et, main="MA Plot", ylim=c(-5,5))
# `topTags(et, n=Inf)Â´ show all genes ranked by p-value.
res <- topTags(et, n=Inf)$table
res
any(is.na(res)) # If TRUE then res <- na.omit(res)
res$symbol <- mapIds(org.Hs.eg.db, keys = rownames(res), keytype = "ENSEMBL", column = "SYMBOL")
res <- res[!is.na(res$symbol),]
res
# Volcano plots for differentially expressed genes
res$expression <- "NOT"
res$expression[res$FDR < 0.05 & res$logFC > 1] <- "UP"
res$expression[res$FDR < 0.05 & res$logFC < -1] <- "DOWN"
ggplot(data = res, aes(x = logFC, y = -log10(FDR), col = expression)) +
geom_vline(xintercept = c(-1, 1), col = "gray", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "gray", linetype = 'dashed') +
geom_point(size = 2) +
scale_color_manual(values = c("#3498DB", "grey", "#E74C3C"),
labels = c("Downregulated", "Not significant", "Upregulated")) +
theme_classic()
EnhancedVolcano(res, x = 'logFC', y = 'FDR', lab = res$symbol,
pCutoff = 0.05, FCcutoff = 1)
# Find significant genes
sigs <- res[res$FDR < 0.05 & abs(res$logFC) > 1, ]
sigs
any(is.na(sigs))
# Heatmap of differentially expressed genes
mat <- cpm(dgList, log=TRUE, prior.count=1)[rownames(sigs),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) = colnames(mat)
head(mat.z)
library(grid)  # for gpar()
Heatmap(
mat.z,
cluster_rows = TRUE,
cluster_columns = TRUE,
column_labels = colnames(mat.z),
name = "Z-score",
row_labels = sigs[rownames(mat.z),]$symbol,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 10)
)
# load raw gene-level counts
counts <- read.delim("C:/RNA_Seq_Analysis/data/count.out", header = TRUE, row.names = 1)
library(DESeq2)
library(ggplot2)
library(ComplexHeatmap)
library(org.Hs.eg.db) # library(org.Mm.eg.db) for mouse
library(EnhancedVolcano)
counts <- counts[which(rowSums(counts) > 0),] # filter rows with only 0
counts
# load raw gene-level counts
counts <- read.delim("C:/RNA_Seq_Analysis/data/count.out", header = TRUE, row.names = 1)
dim(counts)
# Filtering: removed genes with 0 reads in all samples.
counts <- counts[which(rowSums(counts) > 0),]
dim(counts)
# Filtering: removed genes with 0 reads in all samples.
counts <- counts[which(rowSums(counts) > 0),]
dim(counts)
head(counts)
# Filtering: removed genes with 0 reads in all samples.
counts <- counts[which(rowSums(counts) > 0),]
dim(counts)
head(counts)
condition <-  factor(c("C","S","C","S","C","S","C","S"))
coldata <- data.frame(row.names = colnames(counts), condition)
coldata
# Run DeSEQ2
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~condition)
dds <- DESeq(dds)
# Variance-Stabilizing Transformation (VST) & PCA
vsdata <- vst(dds, blind = FALSE)
plotPCA(vsdata, intgroup="condition")+ theme_grey()
res <- results(dds, contrast = c("condition", "S", "C")) #DeSEQ2 result
res
res <- na.omit(res)
res.df <- as.data.frame(res)
res.df
res.df$symbol <- mapIds(org.Hs.eg.db, keys = rownames(res.df), keytype = "ENSEMBL", column = "SYMBOL")
res.df <- res.df[!is.na(res.df$symbol),]
res.df
# Volcano plot
EnhancedVolcano(res.df, x = 'log2FoldChange', y = 'padj', lab = res.df$symbol,
pCutoff = 0.05, FCcutoff = 1)
# Volcano plot using ggplot2
res.df$expression <- "NOT"
res.df$expression[res.df$padj < 0.05 & res.df$log2FoldChange > 1] <- "UP"
res.df$expression[res.df$padj < 0.05 & res.df$log2FoldChange < -1] <- "DOWN"
ggplot(data = res.df, aes(x = log2FoldChange, y = -log10(padj), col = expression)) +
geom_vline(xintercept = c(-1, 1), col = "gray", linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), col = "gray", linetype = 'dashed') +
geom_point(size = 2) +
scale_color_manual(values = c("#3498DB", "grey", "#E74C3C"),
labels = c("Downregulated", "Not significant", "Upregulated")) +
theme_classic()
# Find significant genes
sigs.df <- res.df[res.df$padj < 0.05,]
sigs.df <- sigs.df[(abs(sigs.df$log2FoldChange) > 1),]
sigs.df
# heatmap of "significant"  DEGs
mat <- counts(dds, normalized=T)[rownames(sigs.df),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) <- rownames(coldata)
library(grid)  # for gpar()
Heatmap(
mat.z,
cluster_rows = TRUE,
cluster_columns = TRUE,
column_labels = colnames(mat.z),
name = "Z-score",
row_labels = sigs.df[rownames(mat.z),]$symbol,
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 10)
)
